// <auto-generated />
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Project_05;
using System.Diagnostics.CodeAnalysis;

namespace Project05.Migrations {
    [ExcludeFromCodeCoverage]
    [DbContext(typeof(SqliteDatabaseContext))]
    partial class SqliteDatabaseContextModelSnapshot : ModelSnapshot {
        protected override void BuildModel(ModelBuilder modelBuilder) {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "5.0.4");

            modelBuilder.Entity("DocumentToken", b => {
                b.Property<int>("DocumentsID")
                    .HasColumnType("INTEGER");

                b.Property<int>("TokensID")
                    .HasColumnType("INTEGER");

                b.HasKey("DocumentsID", "TokensID");

                b.HasIndex("TokensID");

                b.ToTable("DocumentToken");
            });

            modelBuilder.Entity("Project_05.Document", b => {
                b.Property<int>("ID")
                    .ValueGeneratedOnAdd()
                    .HasColumnType("INTEGER");

                b.Property<string>("DocumentPath")
                    .HasColumnType("TEXT");

                b.HasKey("ID");

                b.HasIndex("DocumentPath")
                    .IsUnique();

                b.ToTable("Documents");
            });

            modelBuilder.Entity("Project_05.Token", b => {
                b.Property<int>("ID")
                    .ValueGeneratedOnAdd()
                    .HasColumnType("INTEGER");

                b.Property<string>("TokenText")
                    .HasColumnType("TEXT");

                b.HasKey("ID");

                b.HasIndex("TokenText")
                    .IsUnique();

                b.ToTable("Tokens");
            });

            modelBuilder.Entity("DocumentToken", b => {
                b.HasOne("Project_05.Document", null)
                    .WithMany()
                    .HasForeignKey("DocumentsID")
                    .OnDelete(DeleteBehavior.Cascade)
                    .IsRequired();

                b.HasOne("Project_05.Token", null)
                    .WithMany()
                    .HasForeignKey("TokensID")
                    .OnDelete(DeleteBehavior.Cascade)
                    .IsRequired();
            });
#pragma warning restore 612, 618
        }
    }
}
